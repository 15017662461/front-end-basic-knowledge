css全称叫cascading style sheet 层叠样式表
兼容性问题：为了解决部分浏览器不支持某些属性，我们可以使用modernizr插件
进入modernizr官网，选择需要兼容的css内容，点击download，然后将js文件引入，之后在html标签的clas
看到当前浏览器是否支持：.flexbox 表示支持flex  no-flexbox 表示不支持flex  
这样我们就可以通过给样式前面加上flexbox/no-flexbox  来分别进行支持写法和不支持的写法

引入css的方法：
1.  行间样式  直接写在html标签内    <div style="width:100px; height:100px; background-color:red;>  </div>
2.  页面级css  写在head 内         <head><style>#id{}   div{}    [name="xxx"]{}  </style> </head>
3.  外部css文件  写在外部文件     新建文件xxx.css   接着在HTML head里写 <head><link rel="stylesheet" type="text/css" href="css文件地址"></head>  然后css内部跟页面级css是一样的
行间样式>外部css文件

css选择器
一、普通选择器
1.  id选择器   id和标签都是一一对应的，每个标签之间id不能相同    #box{}   <div id="box">  </div>     
2.  class选择器   一个标签可以拥有多个class，一个class也可以对应多个标签   .demo{}  .demo1{}  <div class="demo  demo1"> </div>
3.  标签选择器    直接写标签名称,选择的是该标签的全部       div{}    <div> </div>     常用于初始化该标签，去掉一些不想要的css样式   ul{list-style：none；}
4.  属性选择器    选择属性进行选择         [id="only"]{}   [class]{}   <div id="only" class="demo"></div>
5.  通配符选择器    选择所有标签    *{ }   <div></div>   <span></span>   常规用于初始化所有标签，去掉标签的margin和padding   *{margin：0 ； padding：0；}
6.  !important    在属性后加上！important      #demo{background-color:red!important}
7.  派生选择器     div span{} 用于选中div里面的span   这里的不用一定是标签，还可以是.class或者#id
8.  直接子元素选择器  div > span{}  与派生选择器类似，也是选择内部的元素，但限定为直接的内部，而不是所有内部
9.  并列选择器     div.demo{}  <div class="demo"></div>    多个限制条件（标签，class，id等）来进行选择
10.分组选择器     div，span，em{}      当多个标签拥有相同的css样式时可以这样使用
11.兄弟选择器 有两种  首先是相邻兄弟选择器  div + span  选中的是与div紧邻着的span
还有一个是普通兄弟选择器   div~span  选中的是与div平级的span
css选择器的权重：!important>行间样式>id选择器>class选择器=属性选择器>标签选择器>通配符选择器
具体权重值：！important  正无穷        行间样式 1000       id选择器 100     class|属性|伪类 10      标签|伪元素 1     通配符 0
这里的数字不是10进制，而是256进制      同一行的选择器权重直接相加即可比较对应的权重，权重一样且css内容一样的话，以后面的代码为准

二、伪类选择器（权重是10）
1.  :hover伪类选择器    表示鼠标移动到元素上时呈现的效果     用a：hover  （标签：hover）{}来选择
2.  :link(未访问过的效果)    :visited(被访问过的效果)    :active(点住的效果)
最好按着lvha顺序写，link  visted  hover  active

三、伪元素选择器（权重是1）
1.  ::before/after伪元素选择器     表示选择元素最开始/最后的元素     用.class/#id/p::before     .class/#id/p::after来选中     注意这两种选择器内css必须要有content：“”，里面填的内容就是添加的内容   伪类选择器是行级元素
2.  ::first-letter/first-line  对第一个字母/第一行


css常用属性介绍
1.  字体
  字体大小  font-size : 16px;（默认值)/12px(互联网常用)   如果不设置font-size则字体大小默认为16px，但是互联网一般都会设置为12px
  字体粗细  font-weight：bold(加粗)/bolder（更粗）/nomal(默认值)/lighter（细体)/100-900数字;
  字体样式  font-style: italic(斜体)/normal(默认值)/oblique(人为倾斜);      详情查看css字典
  字体名称  font-family: arial(互联网最常用的字体) ;    详情查看css字典
  字体小型大写   font-variant: normal(正常)/small-caps(启用小型大写)
  字体大小写   text-transform: none/capitalize(单词第一个字母大写)/uppercase(每个字母大写)/lowercase(每个字母小写)
  字符间距    letter-spacing:xpx
  单词间距    word-spacing:xpx
  字体颜色  color：transparent（透明）;
  设置字体颜色有多种方法：① 土鳖式（纯英文单词）：例如red、green等，常在测试时使用，开发时不用
  ②颜色代码：例如#ff4400等    #后每两位代表一种颜色（r，g，b16进制数，从00-ff    如果每两位都是重复的就直接写成三位数：例如淘宝红：#ff4400写成#f40    标准的黑色：#424242
  ③颜色函数：rgb（，，）
2.  边框：  border:1px dashed red;     边框border是一个复合属性，包含 边框厚度line-width：1px      边框样式line-style：solid（实线）、dotted（点状虚线）、dashed（条状虚线，使用较多）   边框颜色line-color：rgb（，，）
border还可以单独设置：border-left：1px dashed green 或者border-left-color：red    
border的边框是一个切角式的，所以可以用来画三角形，设置width和height为0，三边颜色为transparent即可  
3.  水平对齐方式   text-align：center(居中对齐)/left(左对齐)/right(右对齐)/...         详情见css手册
4.  单行文本所占高度   line-height:16px    当不设置字体大小的时候，默认是16px，所以如果设置line-height也为16px的话，每行字将会挨在一起
所以要设置单行文本垂直居中的话，只要设置其line-height等于其容器高度即可，即line-height=height
5.  首行缩进   text-indent：2em（首行缩进两个字符）    em=line-height
6.  文本装饰   text-decoration:none(无，默认值)/overline(上划线)/throughline(贯穿线)/underline(下划线)/blink(闪烁文字)
7.  透明度  opacity：0-1的数字     0完全透明，1不透明
8.  圆角  border-radius：数字pt/数字百分号    当设置成50%会变成圆形    详情查看css手册
9.  内容  content : "这里填写要添加的内容"     content只能用于伪类选择器：before和：after中
10.背景图片 background-image：url（fy.jpg);   背景图片不重复显示：background-repeat：no-repeat；设置图片的位置：background-seize： px px；  背景图片的位置：background-position：x y （center center）
11.光标移动在标签之上时的样式 cursor:pointer(手指样式)  
12.输入边框  outline：none
13.过渡属性  transition：background-color 0.3s   设置背景颜色过渡时间
14.button按钮有着一些自己固有的样式，我们可以这样去掉：border : none ; outline : none;
15.vertical-align 调整行内元素的对齐的方式  top头对齐  center中间对齐  bottom尾对齐(默认)  


盒子模型
盒子的三大部分：盒子壁（border）  内边距（padding）   盒子内容 
还有一个外边距（margin）加起来就是盒子模型
padding和margin后面可以跟4个值，3个值，2个值，以及一个值：
如果是4个值，分别代表：上，右，下，左
如果是3个值，分别代表：上，左右，下
如果是2个值，分别代表：上下，左右
如果是一个值，代表所有都一样
还可以单独设置：padding-top，padding-right，padding-left，padding-bottom
盒子模型的面积计算：
<div><div> div{ width:100px; height:100px; background-color：green； border:10px solid red; padding:10px 20px 30px; margin:10px 20px;}
真实可见颜色的区域大小：宽度：100+10+10+20+20=160px        高度：100+10+10+10+30=160px
要使一个div位于其父级div的正中间：则两个div的width和height一样，设置父级div的padding即可
注意：由于默认body会有8px 的margin，所以会出现与浏览器边框之间有缝隙
为了便于计算和编写，还有一个IE盒模型（怪异盒模型）
在css中加上box-sizing：border-box；它的总高度=height，总宽度=width
如果没有这个box-sizing，它的总高度=border+height+padding  总宽度=border+width+padding

定位/层模型
position：fixed(固定定位)/absolute（绝对定位）/relative (相对定位)
固定定位使用： 固定定位代表该元素位于浏览器的固定位置不动，会随着浏览器滚动而滚动    position：fixed； left：0px ； top：300px
绝对定位使用： 绝对定位是相对于最近的已定位的祖先元素（可以是relative、absolute、fixed）进行定位，如果没有已定位的祖先元素，则相对于浏览器定位  position：absolute；   left/right：100px； top：100px；  
绝对定位的特点：脱离原来的层进行定位，也就是说会浮到上面（像立交桥一样），该位置可以放其他的元素。元素在绝对定位后变成块状元素
相对定位使用： 相对定位是相对于自己原来出生的位置进行定位       position：relative； left：100px ； top： 100px；z-index:1(设置遮盖)
相对定位的特点：保留原来的层进行定位，原来的位置不会让出来给其他元素，但会浮动到其他元素之上
综上所述：使用relative作为定位的参照物，用absolute进行定位
设置position之后元素就会自动变成inline-block元素
要使得某元素居中显示：首先相对于整个浏览器定位    div{position：absolute/fixed；left：50%；top：50%；如果还有点偏差  margin-left：-10px；margin-top：-10px；}
当设置子级元素的margin-top时候会存在一个bug就是子级元素的margin-top会取父级元素的最大值，这种情况需要用到盒子的bfc解决
如何触发盒子的bfc：
①position：absolute；
②display：inline-block；设置成行内块级元素
③float：left/right；
④overflow：hidden；溢出的子元素隐藏展示



浮动模型
float：left(元素浮在左边)/right(元素浮在右边)
浮动模型可以用来排列元素，若干个div都设置成float：left则会从左到右依次排列，设置成float：right则会从右到左排列
浮动模型还可以用来使得文字环绕图片，只需要在图片中设置float：right/left；
浮动模型还可以用于横向导航栏的制作，在使用ul、li制作导航栏的时候默认是竖着排列的，要想使得它横向排列，可以设置li的float：left
浮动元素产生了浮动流：所有产生了浮动流的元素，块级元素（block）就会看不到他们占据并遮盖住浮动元素，产生了bfc的元素和文本类属性的元素（带有inline的）以及文本都能看到浮动元素
如果一个div里面包着一个浮动元素，由于浮动元素不可见，则无法包住，这时就需要添加一个<p>或者<div> clear:both;</p>来消除浮动流或者使div具有bfc    但这种方法编程中一般不使用
消除浮动流：clear：both；   clear只能用于块级元素
常用的消除浮动流的方法是用：after伪类选择器   由于伪类选择器是行级元素，所以需要display    .class::after{content:""; display:block; clear:both; }
我们在用完float之后需要在大的div中清除浮动流，以免对后面产生影响   
设置了浮动之后元素就会自动变成inline-block元素


溢出容器，打点显示
单行文本：首先是white-space：nowrap使得文字不会由于容器大小原因而换行，然后是overflow：hidden，使得溢出的部分隐藏，最后是text-overflow：ellipsis，溢出部分用点点展示
综上所述，单行文本溢出容器打点显示三件套：white-space：nowrap；overflow：hidden；text-overflow：ellipsis；
多行文本：通常采取截断而不是打点     如果设置n行文本后进行截断，则height=n*line-height即可  或者也可以采用
最后一行打点显示，但兼容性不好：overflow:hidden  text-overflow:ellipsis display:-webkit-box  
-webkit-line-clamp:n(需要显示几行)  -webkit-box-orident:vertical  white-space:normal word-wrap:break-word


图片文字化：使得图片在无法加载的时候显示字体：<a href="">淘宝网</a> a{display;inline-block;height:0px;padding-top:90px;backgroud-image:url();backgroud-size:190px 90px;over-flow:hidden }

css的@规则：
@charset    设置样式表的编码     @charset‘utf-8’
@import     在本css文件中导入其他样式文件     @import  ‘reset.css‘；
@media      媒体查询（查询设备尺寸...）
@media screen/print/speech/all and/,/not (min-width:900px/max-width:900px){body{color:..} ul{list-style...}}
@font-face  自定义字体 


以图换字：
h1{ background:url() center no-repeat; text-indent:-9999px;overflow:hidden;}

计算函数：
计算大小（注意符号前后必须有空格）width：calc（100% - 190px）

图片垂直居中显示：
一、单元格形式居中显示
display:table-cell;vertical-align:middle;
二、弹性盒模型
display：flex； justify-content：space-around；（水平居中）align-items：center；（垂直居中）
  
使得列表水平排列显示：
一、浮动：
给每个li添加float：left；但这种方式很难使得水平居中
二、display：inline——block
先给整个ul text-align：center使其居中
给每个li display：inline-block
这样既水平排列，又水平居中


CSS3部分
一、新增的选择器
①兄弟元素选择器
1.相邻兄弟元素选择器：section>nav+article 选择同属于section父元素的紧邻着nav的article元素(必须紧邻且属于同一个父元素)
2.通用兄弟选择器：section>nav~div 选择同属于section父元素的在nav之后的所有的div元素(必须之后的且属于同一个父元素)
②属性选择器
1. a[href]  选择带有href属性的所有a元素
2. a[href='#']选择带有属性href且值为#的所有a元素，注意这里的值必须完全相等
3. a[href~='com']选择带有属性href且值中包含com的所有a元素
4. a[href^='#'] 选择带有属性href且值以#开头的所有a元素
5. a[href$='#'] 选择带有属性href且值以#结尾的所有a元素
6. a[href*='#] 选择带有属性href且值包含#的所有a元素
7. a[href |='#']  选择带有属性a且值包含#或以#开头的所有a元素
③伪类选择器
动态伪类：
1.a:link        选择a链接未被访问时的样式
2.a:visited    选择a链接访问过后的样式
3.a:hover    选择鼠标放在a上的样式
4.a:active     选择鼠标按下a时的样式
5.input:focus    光标聚焦input时的样式   
6.input:valid   输入的内容符合要求时的样式
7.input:invalid 输入的内容不符合要求时的样式
UI元素状态伪类
1. input:enabled   可输入的/启用input样式
2. input:disabled   不可输入/禁用的input的样式
3. input:checked    被光标聚焦的input的样式
伪类更改其他元素的样式：如果是更改其子元素则  div:hover .son 即可，如果是更改非子元素，则div:hover + .brother
css3结构类选择器
1.  div:first-child      选择所有元素的第一个子元素且该子元素为div
2.  div:last-child      选择所有元素的最后一个子元素，且该子元素为div
3.  div:nth-child(N)  选择所有元素的第N个子元素，且该元素为div ，N从1开始计数
这里的N可以是具体的数字，也可以是n(所有)、2n(偶数)、2n-1(奇数)等关于n的表达式，还可以是odd(奇数)/even(偶数)
4.  div:nth-last-child(N)  选择所有元素的倒数第N个子元素，且该元素为div
5.  div:nth-of-type(N)    选择所有元素的第N个div元素，这里只数div
6.  div:nth-last-of-type(N)    选择所有元素的倒数第N个div元素，这里只数div 
7.  div:first-of-type        选择所有元素的第一个div元素，数的时候只数div
8.  div:last-of-type        选择所有元素的第一个div元素，数的时候只数div
9.  div:only-child          选择所有元素的唯一子元素，且该元素是div，这里首先要是唯一子元素
10.div:only-of-type      选择所有元素中的唯一一个div元素
否定选择器
父元素:not(子元素/子选择器)，用于在一排元素中选出一个不要添加样式的,其余正常添加样式
nav>a:not(:last-of-type)  给nav下的所有a添加样式，除了最后一个a标签
④伪元素
::before    在元素标签之前添加内容与content连用，默认是inline行级元素
::after        在元素标签时候添加内容，与content连用，常用于清除浮动，默认是inline行级元素
::first-line  对元素的第一行文本进行更改，只能用于block块级元素
::first-letter   对元素的第一个字母进行更改，也是只能用于block块级元素
::selection    设置选中文本后的背景色和前景色，内部添加background，color就能更改文本选中后的效果

二、边框与圆角
①圆角   border-radius:  px/%  设置圆角边框,设置成50%就会变成圆
②盒阴影  box-shadow:水平偏移，竖直偏移，模糊度，扩展度，颜色，内外阴影
水平偏移竖直偏移单位都是px，默认+是右/下
模糊度单位也是px，会有xpx的慢慢变浅
扩展度单位px会向外扩展xpx
inset内阴影，阴影会在内部，不填就是外阴影
如果要设置四周都有阴影，则水平偏移和竖直偏移都设为0，设置扩展度即可
③边界图片  border-image: source  slice  width outset repeat
source: 图片url，可以设为none或者url('')
slice:   图片边界向内偏移，单位可以是px也可以是%
width：图片边界大小，单位px或者%
outset：指定在边框外部绘制border-image-area的量，单位没有
repeat：是否重复，stretch(默认值)/repeat(重复)/round()/initial()/inherit(继承)

三、文本与字体
①文本阴影  text-shadow  :水平偏移，竖直偏移，模糊度，颜色     与盒阴影类似
②文本轮廓   text-outline：宽度，模糊，颜色  目前主流浏览器都不支持
③换行    word-break：normal(默认)，break-all(任意随便换行)，keep-all(半角和连接符)
word-wrap : normal（断点，默认） break-word（允许单词内部换行）针对url长单词
④最后一行文本的对齐方式 text-align-last:auto(自动),left(左对齐),right(右对齐),center(居中),justify(两端对齐),start(与开头对齐),end(与开头反对齐),initial(默认值),inherit(继承)
⑤文本溢出  text-overflow: clip（直接删除）,ellipsis(多出来的打点显示)   要在overflow：hidden时使用
⑥@font-face
{
font-family<YourWebFontName>;例如：font-family: 'iconfont';
src:<source>[<format>][<source>[<format>]]*;例如：src: url('../font/iconfont.eot?#iefix') format('embedded-opentype')
[font-weight:<weight>];选填
[font-style:<style>];选填
}
⑦弹性盒子模型:display:flex  可以用来时元素水平垂直居中，具体方式：在需要水平处置居中的元素的父级元素：
display:flex;  align-items:center(垂直居中);  justify-content:center(水平居中); 
弹性盒子模型默认是水平排列的，想要调整排列方式：flex-direction:row(水平排列)/column(垂直排列)



四、转换
1.2D转换
① 旋转   transform:rotate(60deg)    deg表示度数，+顺时针，-逆时针，通过transform-origin：更改旋转圆点
注意：旋转后坐标会跟着旋转至面向的那一面，即坐标轴会一起跟着旋转
② 移动   transform：translateX(xpx)/translateY(ypx)/translate(xpx,ypx)
③ 缩放   transform:scaleX(倍数)/scaleY(倍数)/scale( , ),  缩放的中心点是几何中心
④ 扭曲   transform:skewX(50deg)/skewY(50deg)/skew(1deg,1deg)
2.3D转换
① 旋转   transform:rotateX(30reg)/rotateY(30reg)/rotateZ(30reg)/rotate3d(x倍数,y倍数,z倍数,45reg)倍数最大为1
注意：旋转后坐标会跟着旋转至面向的那一面，即坐标轴会一起跟着旋转
② 移动   transform:translateZ(zpx)/translate3d(xpx,ypx,xpx)
③ 旋转   transform:scaleY(倍数)、scale3d(x倍数,y倍数,z倍数)
3. 扩展属性
① 控制重叠元素的3d重叠效果，在它们的父级元素加上transform-style:preserve-3d
② perspective属性，控制观察者远近透视效果，在父级元素加上perspective：xpx，数值变大，观察者离得越近，透视越明显
透视点位置  perspective-origin：bottom(从下往上看)/top(从上往下看)/center(平视)/具体数字
③ 元素背面面向用户时是否可见：backface-visibility:visible(可见)/hidden(不可见)
④ 运算符  新增了calc()运算符，会优先将括号内的值先运算完毕再进行赋值

五、过渡
①需要过渡的属性：transition-property:none/all/相应的属性    例如：transition-property:color;
②过渡的持续时间：transition-duration：time    例如：transition-duration：0.3s
③过渡的动画类型：transition-timing-function:linear(线性过渡)/ease-in(由慢到快)/ease-out(由快到慢)/
ease-in-out(由慢到快再到慢)
④过渡的延迟：transition-delay：time   例如：transition-delay：0.3s
综合写法：
transition ：属性名，持续时间，动画类型，延迟

六、背景与渐变
1.背景图像
①背景图像区域     background-clips:border-box(背景裁剪到边框)/padding-box(内边距)/content-box(内容)
②背景图像定位     background-origin:border-box(边框左上角)/padding-box()/content-box(以内容左上角为原点)
③背景图像大小     background-size:0~100%,0~100%(第一个是宽度，第二个是高度，其中一个不写默认auto，指的是占div的百分比)
还可以给定值，表示背景图像的大小，cover占满整个div，contain等比缩放至某一边紧贴边缘立即停止
④多重背景图像     background-image:url(''),url(''),url(''),前面的会遮住后面的
背景属性整合：background: color  position size repeat origin clip url
建议使用：backgroud：color  url  no-repeat  center  center      background-size：100% 100%    background-clip：    background-origin：
2. 渐变
①线性渐变：background:linear-gradient(方向，开始颜色，中间颜色1,颜色2...，结束颜色)默认从上到下
从左到右：to right     从右到左：to left   从左上到右下：to right  bottom
方向还可以是角度： 45deg，以从下到上为原始线，顺时针为正，逆时针为负
颜色后面还可以加百分数,以控制每个颜色从什么位置开始渐变，颜色可以是rgba控制透明度的渐变
②重复线性渐变:   background：repeating-linear-gradient(方向，颜色1，颜色2...结束颜色)
③径向渐变：     background: radial-gradient(center，形状尺寸，开始颜色，中间颜色1颜色2，...结束颜色)
形状尺寸：默认是ellipse椭圆，还有circle圆形 
④重复径向渐变：background: repeating-radial-gradient(center，形状尺寸，开始颜色，中间颜色1颜色2，...结束颜色）

七、动画
①动画名称：animation-name：keyframename/none
②动画持续时间：animation-duration：0.3s
③动画类型：animation-timing-function：linear(线性)/ease(平滑)/ease-in(慢到快)/ease-out(快到慢)/ease-in-out(慢快慢)
④动画延迟：animation-delay：0.3s  不写默认是0
⑤动画循环次数：animation-iteration-count：infinite(无限循环)/具体次数
⑥动画是否反向：animation-direction：normal(正常)/reverse(反向)/alternate(先正常后反向然后持续交替)/alternate-reverse()
⑦动画不播放时的样式：animation-fill-mode：none/forwards(结束的状态)/backwards(开始状态)/both(判断)
⑧动画运行状态：animation-play-state：paused(暂停)/running
⑨复合属性：animation：名字 持续时间  类型  延迟  循环次数  方向  不播放的样式  运行状态
⑩@keyframes，用于控制关键位置    示例：其中keyframes-selector选定动画关键帧的时间，可以是百分数，
像0%{}，25%{}，100%{}，其中0%可以用from来代替，100%可以用to来代替
@keyframes animationname {
  0%(from){
	css-styles;
  }
50%{
	css-styles;
  }
100%(to){
	css-styles;
  }
}

拓展：will-change增强页面渲染性能
will-change：auto(自动)/scroll-position(将要改变元素的滚动位置)/contents(将要改变元素的内容)/具体transform等/left，top等


主流css布局及实现方法
一、居中布局
①水平居中布局(在父级元素中)
1. 在父级元素中设置text-align:center，子级元素中设置display:inline-block
这种方式会导致子级元素中的文本内容也会水平居中
2. 在子级元素中设置display:table/block   margin:0 auto
这种方式子级元素是脱离文档流的则会无效，即如果设置了float，absolute，fixed这种方式无效
3.父级元素设置position:relative 子元素中设置position:absolute  left:50%  transform:translateX(-50%)
这种方式兼容性存在问题，老版本可能不支持

②垂直居中布局(在父级元素中)
1.父级元素设置display:table-cell  vertical-align:center
这种方式会导致子级元素中的文本内容也会垂直居中
2.父级元素设置position:relative 子元素设置position:absoluet top:50% transform:translateY(-50%)
这种方式兼容性存在问题，老版本可能不支持

③水平垂直居中布局
整合上面两种方式 父级元素设置display:table-cell vertical-align:center 子级元素display:block margin:0 auto
或者 父级元素设置 position:relative 子级元素设置position:absolute top:50% left:50% transform:translate(-50%,-50%)

二、多列布局
①两列布局(左列固定宽度，右列自动填满剩余空间)
1.左列设置width: ?px float:left  右列设置margin-left:?px
这种方式需要精确计算左列的宽度从而设置右列的margin-left，且层级存在问题
2.左列设置width:?px float:left  右列设置overflow:hidden
这种方式会导致右列的部分内容会被隐藏
3.父元素设置display:table table-layout:fixed 左列 display:table-cell width:?px 右列display:table-cell
这种方式会受到table的限制

②圣杯布局(左右两列固定宽度中间自适应)
<div class="parent">
        <div class="center"></div>
        <div class="left"></div>
        <div class="right"></div>
</div>
.parent{height:自己给;margin-left:?px;margin-right:*px}
.center{hieght:自己给;float:left;width:100%}
.left{width:?px;hieght:自己给;margin-left:-100%;position:relative;left:-?px}
.right{width:*px;hieght:自己给;margin-left:-*px;position:relative;left:-*px}

③双飞翼布局(解决圣杯布局中开启定位的问题)
<div class="parent">
        <div class="center">
            <div class="inner"></div>
        </div>
        <div class="right"></div>
        <div class="left"></div>
</div>
.parent{hieght:自己给;}
.center{hieght:自己给;float:left;width:100%}
.left{width:?px;margin-left:-100%}
.right{width:*px;margin-left:-*px}
.inner{margin-left:?px;margin-right:*px}
这样我们只需要把内容写在inner里面就可以实现圣杯布局，注意一定要将center放在最开始

④等分布局(一行被分为若干列，每一列宽度都是相同值)
将每个元素设置成float：left即可
或者将父级元素display:table;将每一个子元素display:table-cell

⑥css3多列布局
1.自动等分宽度多列布局
父级设置column-count:n(想要的列数);column-width:?px(每一列的固定宽度)；column-gap:*px(每一列之间的间隙)

媒体查询  @media
①媒体类型：all(默认值)   screen(屏幕)   print(打印设备)   speech(屏幕阅读器)
②逻辑： and(与)   ,(或)   not(非)
③媒体查询特征表达式：
max-width/min-width
-webkit-device-pixel-ratio/-webkit-max-device-pixel-ratio/-webkit-min-device-pixel-ratio像素比
orientation:landscape(横屏)/portrait(竖屏)

示例：在设备屏幕大小大于900px且像素比大于2且是竖屏情况下body颜色是绿色：
@media all and(min-width:900px) and(-webkit-min-device-pixel-ratio:2) and(orientation:portrait){
body{
background-color:green;
}
}











